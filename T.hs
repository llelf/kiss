{-# LANGUAGE ScopedTypeVariables, NoMonomorphismRestriction #-}
module T where
import A; import K; import P; import Data.Function;import Control.Applicative
import Shower;        import Control.Monad;import Test.QuickCheck hiding(Fun)

trip(e::E)=ps(pp e)ðŸ‘ŒJust e where(ðŸ‘Œ)=(==)`on`fmap post

post::E->E; post=rwE lst1âˆ˜rwE comnâˆ˜rwE bdicâˆ˜rwE lst1

lst1(Ap(Fun(Op(:..)))[x])=Ï€$Ls[x]; lst1 _=Îµ;  bdic(Ap(Fun(Op(:!)))[Ls k,Ls v])|len k==len v=Ï€$Dic k v; bdic _=Îµ
comn(Com(Ap f[x,Nil])g)  =Ï€$Ap f[x,g];                     comn(Com f@Fun{} g)=Ï€$Ap f[g];                comn _=Îµ
coms(Ap f[x,Ap g[y,Nil]])=Ï€$Com(Ap f[x,Nil])(Ap g[y,Nil]); coms(Ap f[Ap g[y,Nil]])=Ï€$Com f(Ap g[y,Nil]); coms _=Îµ
apn (Ap(Ap f[x,Nil])[y]) =Ï€$Ap f[x,y]; apn _=Îµ

{-comn(Com f(Ap g a))|Nilâˆ‰a=Ï€$Ap f[Ap g a]-}


qc=quickCheckWith(stdArgs{maxSuccess=2000,maxSize=500,maxShrinks=5000})
qc' x y z=quickCheckWith(stdArgs{maxSuccess=x,maxSize=y,maxShrinks=z})
Îµ=empty;(âˆ‰)=notElem
